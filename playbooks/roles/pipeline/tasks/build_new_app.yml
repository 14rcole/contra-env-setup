---
- name: "{{ container_config_name }} :: Imagestream and buildconfig do not exist. Creating..."
  shell: oc new-app {{ template_name_file.stdout }} {{ params | join(" ") }}
  args:
    chdir: "{{ pipeline_dir }}/config"
  when: (image_stream_name_check.stdout == "" and build_config_name_check.stdout == "" and build_success|bool == false)

# Wait container in the pipeline to start building
- name: "{{ container_config_name }} :: Wait for {{  build_config_name_file.stdout }} to be queued"
  shell: "oc get builds | grep '{{  build_config_name_file.stdout }}'"
  register: oc_build_result
  until: oc_build_result.stdout.find(" Pending ") == -1
  retries: 6
  delay: 10
  ignore_errors: yes
  when: build_success|bool == false

# Wait container in the pipeline to be finished building
- name: "{{ container_config_name }} :: Wait for {{  build_config_name_file.stdout }} to be built and marked with latest tag"
  shell: "oc get builds | grep '{{  build_config_name_file.stdout }}'"
  register: oc_build_result
  until: (oc_build_result.stdout.find(" Running ") == -1 or oc_build_result.stdout.find(" Failed ") != -1)
  retries: 300
  delay: 10
  when: build_success|bool == false

# Set fact if build result is Complete
- set_fact:
    build_success: true
  when: (build_success|bool == false and oc_build_result is defined and oc_build_result.stdout.find(" Complete ") != -1)

# Cleanup any failed containers
- name: Cleanup any failed containers
  shell: "oc get all | egrep 'Failed|Error' | egrep 'builds' | awk '{print $1}' | awk -F'/' '{print $2}' | sed 's/-[0-9+]//g' | xargs -i oc delete bc/{} is/{}"
  ignore_errors: yes
  when: (build_success|bool == false and oc_build_result is defined and oc_build_result.stdout.find(" Failed ") != -1)

# If oc_build result is defined publish the outcome
- debug:
    msg: "End result of building the container image :: {{ oc_build_result.stdout }}"
  when: oc_build_result.stdout is defined
