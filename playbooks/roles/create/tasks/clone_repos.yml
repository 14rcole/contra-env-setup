---
# clone the project repo

# Determine if project directory exists
- name: "Is project repository present in {{ project_dir }}"
  stat:
    path: "{{ project_dir }}"
  register: pd_is_found

- name: "Set http.sslVerify false"
  shell: git config --global http.sslVerify false

# git clone project_repo
- name: "Fetch latest for {{ project_repo }}@{{ project_branch }}"
  shell: git fetch --all
  when: (pd_is_found.stat.exists) and
    (force_repo_clone|bool == true)

# git clone project_repo
- name: "checkout the project repo: {{ project_repo }}@{{ project_branch }} to {{ project_dir }}"
  git:
    repo: "{{ project_repo }}"
    dest: "{{ project_dir }}"
    refspec: "{{ project_refspec }}"
    version: "{{ project_branch }}"
    force: yes
  when: (not pd_is_found.stat.exists) or
        (force_repo_clone|bool == true)

# git clone sample_project_repo
- name: "checkout the sample project repo @ {{ sample_project_repo }} to {{ sample_project_dir }}"
  git:
    repo: "{{ sample_project_repo }}"
    dest: "{{ sample_project_dir }}"
    refspec: "{{ sample_project_refspec }}"
    version: "{{ sample_project_branch }}"
    force: yes
  when:
    - project_repo != sample_project_repo
    - setup_sample_project|bool == true

# git clone helper_project_repo
- name: "checkout the helper project repo @ {{ helper_project_repo }} to {{ helper_project_dir }}"
  git:
    repo: "{{ helper_project_repo }}"
    dest: "{{ helper_project_dir }}"
    refspec: "{{ helper_project_refspec }}"
    version: "{{ helper_project_branch }}"
    force: yes
  when:
    - project_repo != helper_project_repo
    - setup_helper_containers|bool == true
