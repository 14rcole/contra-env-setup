---
- name: "{{ container_config_name }} :: Imagestream and buildconfig do not exist. Creating..."
  shell: "{{ oc_bin }} new-app {{ template_name_file.stdout }} {{ params | join(' ') }}"
  args:
    chdir: "{{ project_dir }}/config"
  when: (image_stream_name_check.stdout == "" and build_config_name_check.stdout == "" and build_success|bool == false)

# Wait container in the pipeline to start building
- name: "{{ container_config_name }} :: Wait for {{  build_config_name_file.stdout }} to be queued"
  shell: "{{ oc_bin }} get builds | grep '{{  build_config_name_file.stdout }}'"
  register: oc_build_result
  until: (oc_build_result.stdout.find(" Pending ") == -1 or oc_build_result.stdout.find(" New ") == -1)
  retries: 6
  delay: 10
  ignore_errors: yes
  when: build_success|bool == false

# Wait container in the pipeline to be finished building
- name: "{{ container_config_name }} :: Wait for {{  build_config_name_file.stdout }} to be built and marked with latest tag"
  shell: "{{ oc_bin }} get builds | grep '{{  build_config_name_file.stdout }}'"
  register: oc_build_result
  until: (oc_build_result.stdout.find(" Running ") == -1 or oc_build_result.stdout.find(" Failed ") != -1)
  retries: 300
  delay: 10
  when: build_success|bool == false

# Set fact if build result is Complete
- set_fact:
    build_success: true
  when: (build_success|bool == false and oc_build_result is defined and oc_build_result.stdout.find(" Complete ") != -1)

# Check for failed apps and cleanup
- name: "Check for any failed app on the cluster"
  shell: "{{ oc_bin }} get all | egrep 'Failed|Error' | egrep 'builds' | awk '{print $1}' | awk -F'/' '{print $2}' | sed 's/-[0-9+]//g' | head -1"
  register: oc_check_app_status
  ignore_errors: yes
  when: build_success|bool == false

- name: "Cleanup any failed dc, bc, routes, svc, and is for {{ oc_check_app_status.stdout }} on the cluster"
  shell: "{{ oc_bin }} get all | grep '{{ oc_check_app_status.stdout }}' | awk '{print $1}' | egrep -v 'builds|po' | xargs -i {{ oc_bin }} delete {}"
  ignore_errors: yes
  when: (build_success|bool == false and oc_check_app_status.stdout != "")

- name: "Cleanup any serviceaccounts, pvc, and rolebindings for an app if it exists on the cluster"
  shell: "{{ oc_bin }} get {{ item }} | grep '{{ oc_check_app_status.stdout }}' | awk '{print $1}' | xargs -i {{ oc_bin }} delete {{ item }}/{}"
  ignore_errors: yes
  with_items:
    - serviceaccounts
    - pvc
    - rolebindings
  when: (build_success|bool == false and oc_check_app_status.stdout != "")

# If oc_build result is defined publish the outcome
- debug:
    msg: "End result of building the container image :: {{ oc_build_result.stdout }}"
  when: oc_build_result.stdout is defined
